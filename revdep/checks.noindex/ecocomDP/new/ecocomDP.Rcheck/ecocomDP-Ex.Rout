
R version 4.2.2 (2022-10-31) -- "Innocent and Trusting"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "ecocomDP"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('ecocomDP')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("annotation_dictionary")
> ### * annotation_dictionary
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: annotation_dictionary
> ### Title: Annotations of published data
> ### Aliases: annotation_dictionary
> 
> ### ** Examples
> 
> ## Not run: 
> ##D View(annotation_dictionary())
> ## End(Not run)
>     
> 
> 
> 
> cleanEx()
> nameEx("convert_to_dwca")
> ### * convert_to_dwca
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: convert_to_dwca
> ### Title: Convert a dataset to the Darwin Core Archive format
> ### Aliases: convert_to_dwca
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Create directory for DwC-A outputs
> ##D mypath <- paste0(tempdir(), "/data")
> ##D dir.create(mypath)
> ##D 
> ##D # Convert an EDI published ecocomDP dataset to a DwC-A
> ##D convert_to_dwca(
> ##D   path = mypath, 
> ##D   core_name = "event", 
> ##D   source_id = "edi.193.5", 
> ##D   derived_id = "edi.834.2", 
> ##D   user_id = "ecocomdp",
> ##D   user_domain = "EDI")
> ##D 
> ##D dir(mypath)
> ##D 
> ##D # Clean up
> ##D unlink(mypath, recursive = TRUE)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("create_dataset_summary")
> ### * create_dataset_summary
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: create_dataset_summary
> ### Title: Create the dataset_summary table
> ### Aliases: create_dataset_summary
> 
> ### ** Examples
> 
> flat <- ants_L0_flat
> 
> dataset_summary <- create_dataset_summary(
+   L0_flat = flat, 
+   package_id = "package_id", 
+   original_package_id = "original_package_id", 
+   length_of_survey_years = "length_of_survey_years",
+   number_of_years_sampled = "number_of_years_sampled", 
+   std_dev_interval_betw_years = "std_dev_interval_betw_years", 
+   max_num_taxa = "max_num_taxa", 
+   geo_extent_bounding_box_m2 = "geo_extent_bounding_box_m2")
> 
> dataset_summary
# A tibble: 1 × 7
  package_id original_package_id length_of_sur…¹ numbe…² std_d…³ max_n…⁴ geo_e…⁵
  <chr>      <chr>                         <dbl>   <dbl>   <dbl>   <dbl>   <dbl>
1 edi.193.5  knb-lter-hfr.118.33              15      13    0.67      53  913451
# … with abbreviated variable names ¹​length_of_survey_years,
#   ²​number_of_years_sampled, ³​std_dev_interval_betw_years, ⁴​max_num_taxa,
#   ⁵​geo_extent_bounding_box_m2
> 
> 
> 
> 
> cleanEx()
> nameEx("create_eml")
> ### * create_eml
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: create_eml
> ### Title: Create EML metadata
> ### Aliases: create_eml
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Create directory with ecocomDP tables for create_eml()
> ##D mypath <- paste0(tempdir(), "/data")
> ##D dir.create(mypath)
> ##D inpts <- c(ants_L1$tables, path = mypath)
> ##D do.call(write_tables, inpts)
> ##D file.copy(system.file("extdata", "create_ecocomDP.R", package = "ecocomDP"), mypath)
> ##D dir(mypath)
> ##D 
> ##D # Describe, with annotations, what the source L0 dataset "is about"
> ##D dataset_annotations <- c(
> ##D   `species abundance` = "http://purl.dataone.org/odo/ECSO_00001688",
> ##D   Population = "http://purl.dataone.org/odo/ECSO_00000311",
> ##D   `level of ecological disturbance` = "http://purl.dataone.org/odo/ECSO_00002588",
> ##D   `type of ecological disturbance` = "http://purl.dataone.org/odo/ECSO_00002589")
> ##D 
> ##D # Add self as contact information incase questions arise
> ##D additional_contact <- data.frame(
> ##D   givenName = 'Colin',
> ##D   surName = 'Smith',
> ##D   organizationName = 'Environmental Data Initiative',
> ##D   electronicMailAddress = 'csmith@mail.com',
> ##D   stringsAsFactors = FALSE)
> ##D 
> ##D # Create EML
> ##D eml <- create_eml(
> ##D   path = mypath,
> ##D   source_id = "knb-lter-hfr.118.33",
> ##D   derived_id = "edi.193.5",
> ##D   is_about = dataset_annotations,
> ##D   script = "create_ecocomDP.R",
> ##D   script_description = "A function for converting knb-lter-hrf.118 to ecocomDP",
> ##D   contact = additional_contact,
> ##D   user_id = 'ecocomdp',
> ##D   user_domain = 'EDI',
> ##D   basis_of_record = "HumanObservation")
> ##D 
> ##D dir(mypath)
> ##D View(eml)
> ##D 
> ##D # Clean up
> ##D unlink(mypath, recursive = TRUE)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("create_location")
> ### * create_location
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: create_location
> ### Title: Create the location table
> ### Aliases: create_location
> 
> ### ** Examples
> 
> flat <- ants_L0_flat
> 
> location <- create_location(
+   L0_flat = flat, 
+   location_id = "location_id", 
+   location_name = c("block", "plot"), 
+   latitude = "latitude", 
+   longitude = "longitude", 
+   elevation = "elevation")
> 
> location
# A tibble: 10 × 6
   location_id location_name latitude longitude elevation parent_location_id
   <chr>       <chr>            <dbl>     <dbl>     <dbl> <chr>             
 1 a1          block__Ridge      NA        NA          NA <NA>              
 2 a2          block__Valley     NA        NA          NA <NA>              
 3 1           plot__1           42.5     -72.2       220 a2                
 4 2           plot__2           42.5     -72.2       220 a2                
 5 3           plot__3           42.5     -72.2       220 a2                
 6 4           plot__4           42.5     -72.2       220 a1                
 7 5           plot__5           42.5     -72.2       220 a1                
 8 6           plot__6           42.5     -72.2       220 a1                
 9 7           plot__7           42.5     -72.2       220 a1                
10 8           plot__8           42.5     -72.2       220 a2                
> 
> 
> 
> 
> cleanEx()
> nameEx("create_location_ancillary")
> ### * create_location_ancillary
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: create_location_ancillary
> ### Title: Create the location_ancillary table
> ### Aliases: create_location_ancillary
> 
> ### ** Examples
> 
> flat <- ants_L0_flat
> 
> location_ancillary <- create_location_ancillary(
+   L0_flat = flat,
+   location_id = "location_id",
+   variable_name = "treatment")
> 
> location_ancillary
# A tibble: 8 × 6
  location_ancillary_id location_id datetime variable_name value           unit 
  <chr>                 <chr>       <chr>    <chr>         <chr>           <chr>
1 1                     1           <NA>     treatment     Girdled         <NA> 
2 2                     2           <NA>     treatment     Logged          <NA> 
3 3                     3           <NA>     treatment     HemlockControl  <NA> 
4 4                     4           <NA>     treatment     Logged          <NA> 
5 5                     5           <NA>     treatment     Girdled         <NA> 
6 6                     6           <NA>     treatment     HemlockControl  <NA> 
7 7                     7           <NA>     treatment     HardwoodControl <NA> 
8 8                     8           <NA>     treatment     HardwoodControl <NA> 
> 
> 
> 
> 
> cleanEx()
> nameEx("create_observation")
> ### * create_observation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: create_observation
> ### Title: Create the observation table
> ### Aliases: create_observation
> 
> ### ** Examples
> 
> flat <- ants_L0_flat
> 
> observation <- create_observation(
+   L0_flat = flat, 
+   observation_id = "observation_id", 
+   event_id = "event_id", 
+   package_id = "package_id",
+   location_id = "location_id", 
+   datetime = "datetime", 
+   taxon_id = "taxon_id", 
+   variable_name = "variable_name",
+   value = "value",
+   unit = "unit")
> 
> observation
# A tibble: 2,931 × 9
   observation_id event…¹ packa…² locat…³ datetime   taxon…⁴ varia…⁵ value unit 
   <chr>          <chr>   <chr>   <chr>   <date>     <chr>   <chr>   <dbl> <chr>
 1 1              1       edi.19… 4       2003-06-01 1       abunda…     2 numb…
 2 2              1       edi.19… 4       2003-06-01 2       abunda…     2 numb…
 3 3              1       edi.19… 4       2003-06-01 53      abunda…     1 numb…
 4 4              1       edi.19… 4       2003-06-01 2       abunda…     2 numb…
 5 5              1       edi.19… 4       2003-06-01 2       abunda…     1 numb…
 6 6              1       edi.19… 4       2003-06-01 8       abunda…     1 numb…
 7 7              1       edi.19… 4       2003-06-01 24      abunda…     1 numb…
 8 8              1       edi.19… 4       2003-06-01 42      abunda…     1 numb…
 9 9              1       edi.19… 4       2003-06-01 53      abunda…     1 numb…
10 10             1       edi.19… 4       2003-06-01 1       abunda…     1 numb…
# … with 2,921 more rows, and abbreviated variable names ¹​event_id,
#   ²​package_id, ³​location_id, ⁴​taxon_id, ⁵​variable_name
> 
> 
> 
> 
> cleanEx()
> nameEx("create_observation_ancillary")
> ### * create_observation_ancillary
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: create_observation_ancillary
> ### Title: Create the observation_ancillary table
> ### Aliases: create_observation_ancillary
> 
> ### ** Examples
> 
> flat <- ants_L0_flat
> 
> observation_ancillary <- create_observation_ancillary(
+   L0_flat = flat,
+   observation_id = "observation_id", 
+   variable_name = c("trap.type", "trap.num", "moose.cage"))
> 
> observation_ancillary
# A tibble: 8,793 × 5
   observation_ancillary_id observation_id variable_name value  unit 
   <chr>                    <chr>          <chr>         <chr>  <chr>
 1 1                        1              trap.type     bait   <NA> 
 2 2                        1              trap.num      1 hour <NA> 
 3 3                        1              moose.cage    <NA>   <NA> 
 4 4                        2              trap.type     bait   <NA> 
 5 5                        2              trap.num      1 hour <NA> 
 6 6                        2              moose.cage    <NA>   <NA> 
 7 7                        3              trap.type     bait   <NA> 
 8 8                        3              trap.num      1 hour <NA> 
 9 9                        3              moose.cage    <NA>   <NA> 
10 10                       4              trap.type     bait   <NA> 
# … with 8,783 more rows
> 
> 
> 
> 
> cleanEx()
> nameEx("create_taxon")
> ### * create_taxon
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: create_taxon
> ### Title: Create the taxon table
> ### Aliases: create_taxon
> 
> ### ** Examples
> 
> flat <- ants_L0_flat
> 
> taxon <- create_taxon(
+   L0_flat = flat, 
+   taxon_id = "taxon_id", 
+   taxon_rank = "taxon_rank", 
+   taxon_name = "taxon_name", 
+   authority_system = "authority_system", 
+   authority_taxon_id = "authority_taxon_id")
> 
> taxon
# A tibble: 53 × 5
   taxon_id taxon_rank taxon_name                 authority_system authority_t…¹
   <chr>    <chr>      <chr>                      <chr>            <chr>        
 1 1        Species    Aphaenogaster fulva        ITIS             578383       
 2 2        Species    Aphaenogaster picea        ITIS             578440       
 3 3        Species    Camponotus chromaiodes     ITIS             575766       
 4 4        Species    Camponotus herculeanus     ITIS             575995       
 5 5        Species    Camponotus nearcticus      ITIS             576193       
 6 6        Species    Camponotus novaeboracensis ITIS             685607       
 7 7        Species    Camponotus pennsylvanica   ITIS             154198       
 8 8        Species    Camponotus pennsylvanicus  ITIS             154198       
 9 9        Species    Crematogaster lineolata    ITIS             579090       
10 10       Species    Formica argentea           ITIS             576688       
# … with 43 more rows, and abbreviated variable name ¹​authority_taxon_id
> 
> 
> 
> 
> cleanEx()
> nameEx("create_taxon_ancillary")
> ### * create_taxon_ancillary
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: create_taxon_ancillary
> ### Title: Create the taxon_ancillary table
> ### Aliases: create_taxon_ancillary
> 
> ### ** Examples
> 
> flat <- ants_L0_flat
> 
> taxon_ancillary <- create_taxon_ancillary(
+   L0_flat = flat,
+   taxon_id = "taxon_id",
+   variable_name = c(
+     "subfamily", "hl", "rel", "rll", "colony.size", 
+     "feeding.preference", "nest.substrate", "primary.habitat", 
+     "secondary.habitat", "seed.disperser", "slavemaker.sp", 
+     "behavior", "biogeographic.affinity", "source"),
+   unit = c("unit_hl", "unit_rel", "unit_rll"))
> 
> taxon_ancillary
# A tibble: 742 × 7
   taxon_ancillary_id taxon_id datetime variable_name      value    unit  author
   <chr>              <chr>    <chr>    <chr>              <chr>    <chr> <chr> 
 1 1                  1        <NA>     subfamily          Myrmici… <NA>  <NA>  
 2 2                  1        <NA>     hl                 1.1582   mill… <NA>  
 3 3                  1        <NA>     rel                0.17268… mill… <NA>  
 4 4                  1        <NA>     rll                1.32377… mill… <NA>  
 5 5                  1        <NA>     colony.size        Medium   <NA>  <NA>  
 6 6                  1        <NA>     feeding.preference Granivo… <NA>  <NA>  
 7 7                  1        <NA>     nest.substrate     Wood     <NA>  <NA>  
 8 8                  1        <NA>     primary.habitat    Open     <NA>  <NA>  
 9 9                  1        <NA>     secondary.habitat  Wet      <NA>  <NA>  
10 10                 1        <NA>     seed.disperser     Y        <NA>  <NA>  
# … with 732 more rows
> 
> 
> 
> 
> cleanEx()
> nameEx("create_variable_mapping")
> ### * create_variable_mapping
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: create_variable_mapping
> ### Title: Create the variable_mapping table
> ### Aliases: create_variable_mapping
> 
> ### ** Examples
> 
> flat <- ants_L0_flat
> 
> # Create inputs to variable_mapping()
> 
> observation <- create_observation(
+   L0_flat = flat, 
+   observation_id = "observation_id", 
+   event_id = "event_id", 
+   package_id = "package_id",
+   location_id = "location_id", 
+   datetime = "datetime", 
+   taxon_id = "taxon_id", 
+   variable_name = "variable_name",
+   value = "value",
+   unit = "unit")
> 
> observation_ancillary <- create_observation_ancillary(
+   L0_flat = flat,
+   observation_id = "observation_id", 
+   variable_name = c("trap.type", "trap.num", "moose.cage"))
> 
> location_ancillary <- create_location_ancillary(
+   L0_flat = flat,
+   location_id = "location_id",
+   variable_name = "treatment")
> 
> taxon_ancillary <- create_taxon_ancillary(
+   L0_flat = flat,
+   taxon_id = "taxon_id",
+   variable_name = c(
+     "subfamily", "hl", "rel", "rll", "colony.size", 
+     "feeding.preference", "nest.substrate", "primary.habitat", 
+     "secondary.habitat", "seed.disperser", "slavemaker.sp", 
+     "behavior", "biogeographic.affinity", "source"),
+   unit = c("unit_hl", "unit_rel", "unit_rll"))
> 
> # Create variable_mapping table
> 
> variable_mapping <- create_variable_mapping(
+   observation = observation,
+   observation_ancillary = observation_ancillary,
+   location_ancillary = location_ancillary, 
+   taxon_ancillary = taxon_ancillary)
> 
> variable_mapping
# A tibble: 19 × 6
   variable_mapping_id table_name            variable_…¹ mappe…² mappe…³ mappe…⁴
   <chr>               <chr>                 <chr>       <chr>   <chr>   <chr>  
 1 1                   observation           abundance   <NA>    <NA>    <NA>   
 2 2                   observation_ancillary trap.type   <NA>    <NA>    <NA>   
 3 3                   observation_ancillary trap.num    <NA>    <NA>    <NA>   
 4 4                   observation_ancillary moose.cage  <NA>    <NA>    <NA>   
 5 5                   location_ancillary    treatment   <NA>    <NA>    <NA>   
 6 6                   taxon_ancillary       subfamily   <NA>    <NA>    <NA>   
 7 7                   taxon_ancillary       hl          <NA>    <NA>    <NA>   
 8 8                   taxon_ancillary       rel         <NA>    <NA>    <NA>   
 9 9                   taxon_ancillary       rll         <NA>    <NA>    <NA>   
10 10                  taxon_ancillary       colony.size <NA>    <NA>    <NA>   
11 11                  taxon_ancillary       feeding.pr… <NA>    <NA>    <NA>   
12 12                  taxon_ancillary       nest.subst… <NA>    <NA>    <NA>   
13 13                  taxon_ancillary       primary.ha… <NA>    <NA>    <NA>   
14 14                  taxon_ancillary       secondary.… <NA>    <NA>    <NA>   
15 15                  taxon_ancillary       seed.dispe… <NA>    <NA>    <NA>   
16 16                  taxon_ancillary       slavemaker… <NA>    <NA>    <NA>   
17 17                  taxon_ancillary       behavior    <NA>    <NA>    <NA>   
18 18                  taxon_ancillary       biogeograp… <NA>    <NA>    <NA>   
19 19                  taxon_ancillary       source      <NA>    <NA>    <NA>   
# … with abbreviated variable names ¹​variable_name, ²​mapped_system, ³​mapped_id,
#   ⁴​mapped_label
> 
> 
> 
> 
> cleanEx()
> nameEx("flatten_data")
> ### * flatten_data
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: flatten_data
> ### Title: Flatten a dataset
> ### Aliases: flatten_data
> 
> ### ** Examples
> 
> # Flatten a dataset object
> flat <- flatten_data(ants_L1)
> flat
# A tibble: 2,931 × 46
   observation_id event…¹ datetime   varia…² value unit  trap.…³ trap.…⁴ moose…⁵
   <chr>          <chr>   <date>     <chr>   <dbl> <chr> <chr>   <chr>   <chr>  
 1 1              1       2003-06-01 abunda…     2 numb… bait    1 hour  <NA>   
 2 2              1       2003-06-01 abunda…     2 numb… bait    1 hour  <NA>   
 3 3              1       2003-06-01 abunda…     1 numb… bait    1 hour  <NA>   
 4 4              1       2003-06-01 abunda…     2 numb… bait    15 min… <NA>   
 5 5              1       2003-06-01 abunda…     1 numb… hand    <NA>    <NA>   
 6 6              1       2003-06-01 abunda…     1 numb… hand    <NA>    <NA>   
 7 7              1       2003-06-01 abunda…     1 numb… hand    <NA>    <NA>   
 8 8              1       2003-06-01 abunda…     1 numb… hand    <NA>    <NA>   
 9 9              1       2003-06-01 abunda…     1 numb… hand    <NA>    <NA>   
10 10             1       2003-06-01 abunda…     1 numb… litter  1       <NA>   
# … with 2,921 more rows, 37 more variables: location_id <chr>,
#   location_name <chr>, block <chr>, plot <chr>, latitude <dbl>,
#   longitude <dbl>, elevation <dbl>, treatment <chr>, taxon_id <chr>,
#   taxon_rank <chr>, taxon_name <chr>, authority_system <chr>,
#   authority_taxon_id <chr>, behavior <chr>, biogeographic.affinity <chr>,
#   colony.size <chr>, feeding.preference <chr>, hl <dbl>, unit_hl <chr>,
#   nest.substrate <chr>, primary.habitat <chr>, rel <dbl>, unit_rel <chr>, …
> 
> # Flatten a list of tables
> tables <- ants_L1$tables
> flat <- flatten_data(tables)
> flat
# A tibble: 2,931 × 46
   observation_id event…¹ datetime   varia…² value unit  trap.…³ trap.…⁴ moose…⁵
   <chr>          <chr>   <date>     <chr>   <dbl> <chr> <chr>   <chr>   <chr>  
 1 1              1       2003-06-01 abunda…     2 numb… bait    1 hour  <NA>   
 2 2              1       2003-06-01 abunda…     2 numb… bait    1 hour  <NA>   
 3 3              1       2003-06-01 abunda…     1 numb… bait    1 hour  <NA>   
 4 4              1       2003-06-01 abunda…     2 numb… bait    15 min… <NA>   
 5 5              1       2003-06-01 abunda…     1 numb… hand    <NA>    <NA>   
 6 6              1       2003-06-01 abunda…     1 numb… hand    <NA>    <NA>   
 7 7              1       2003-06-01 abunda…     1 numb… hand    <NA>    <NA>   
 8 8              1       2003-06-01 abunda…     1 numb… hand    <NA>    <NA>   
 9 9              1       2003-06-01 abunda…     1 numb… hand    <NA>    <NA>   
10 10             1       2003-06-01 abunda…     1 numb… litter  1       <NA>   
# … with 2,921 more rows, 37 more variables: location_id <chr>,
#   location_name <chr>, block <chr>, plot <chr>, latitude <dbl>,
#   longitude <dbl>, elevation <dbl>, treatment <chr>, taxon_id <chr>,
#   taxon_rank <chr>, taxon_name <chr>, authority_system <chr>,
#   authority_taxon_id <chr>, behavior <chr>, biogeographic.affinity <chr>,
#   colony.size <chr>, feeding.preference <chr>, hl <dbl>, unit_hl <chr>,
#   nest.substrate <chr>, primary.habitat <chr>, rel <dbl>, unit_rel <chr>, …
> 
> 
> 
> 
> cleanEx()
> nameEx("plot_sample_space_time")
> ### * plot_sample_space_time
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_sample_space_time
> ### Title: Plot dates and times samples were collected or observations were
> ###   made
> ### Aliases: plot_sample_space_time
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Read a dataset of interest
> ##D dataset <- read_data("edi.193.5")
> ##D 
> ##D # Plot the dataset
> ##D plot_sample_space_time(dataset)
> ##D 
> ##D # Flatten the dataset, manipulate, then plot
> ##D dataset %>% 
> ##D   flatten_data() %>% 
> ##D   dplyr::filter(lubridate::as_date(datetime) > "2003-07-01") %>%
> ##D   dplyr::filter(as.numeric(location_id) > 4) %>%
> ##D   plot_sample_space_time()
> ## End(Not run)
> 
> # Plot the example dataset
> plot_sample_space_time(ants_L1)
> 
> 
> 
> 
> cleanEx()
> nameEx("plot_sites")
> ### * plot_sites
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_sites
> ### Title: Plot sites on US map
> ### Aliases: plot_sites
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Read a dataset of interest
> ##D dataset <- read_data("edi.193.5")
> ##D 
> ##D # Plot the dataset
> ##D plot_sites(dataset)
> ##D 
> ##D # Flatten dataset then plot
> ##D dataset %>% 
> ##D   flatten_data() %>% 
> ##D   plot_sites()
> ## End(Not run)
> 
> # Plot the example dataset
> plot_sites(ants_L1)
> 
> 
> 
> 
> cleanEx()
> nameEx("plot_taxa_abund")
> ### * plot_taxa_abund
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_taxa_abund
> ### Title: Plot mean taxa abundances per 'observation_id'
> ### Aliases: plot_taxa_abund
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Read a dataset of interest
> ##D dataset <- read_data("edi.193.5")
> ##D 
> ##D # plot ecocomDP formatted dataset
> ##D plot_taxa_abund(dataset)
> ##D 
> ##D # plot flattened ecocomDP dataset, log(x+1) transform abundances
> ##D plot_taxa_abund(
> ##D   data = flatten_data(dataset),
> ##D   trans = "log1p")
> ##D 
> ##D # facet by location color by taxon_rank, log 10 transform
> ##D plot_taxa_abund(
> ##D   data = dataset,
> ##D   facet_var = "location_id",
> ##D   color_var = "taxon_rank",
> ##D   trans = "log10")
> ##D 
> ##D # facet by location, minimum rel. abund = 0.05, log 10 transform
> ##D plot_taxa_abund(
> ##D   data = dataset,
> ##D   facet_var = "location_id",
> ##D   min_relative_abundance = 0.05,
> ##D   trans = "log1p")
> ##D 
> ##D # color by location, log 10 transform
> ##D plot_taxa_abund(
> ##D   data = dataset,
> ##D   color_var = "location_id",
> ##D   trans = "log10")
> ##D 
> ##D # tidy syntax, flatten then filter data by date
> ##D dataset %>% 
> ##D   flatten_data() %>% 
> ##D   dplyr::filter(
> ##D     lubridate::as_date(datetime) > "2003-07-01") %>%
> ##D   plot_taxa_abund(
> ##D     trans = "log1p",
> ##D     min_relative_abundance = 0.01)
> ## End(Not run)
> 
> # Plot the example dataset
> plot_taxa_abund(ants_L1)
Warning: Removed 78 rows containing non-finite values (`stat_boxplot()`).
> 
> 
> 
> 
> cleanEx()
> nameEx("plot_taxa_accum_sites")
> ### * plot_taxa_accum_sites
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_taxa_accum_sites
> ### Title: Plot taxa accumulation by site accumulation
> ### Aliases: plot_taxa_accum_sites
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Read a dataset of interest
> ##D dataset <- read_data("edi.193.5")
> ##D 
> ##D # Plot the dataset
> ##D plot_taxa_accum_sites(dataset)
> ##D 
> ##D # Flatten the dataset, manipulate, then plot
> ##D dataset %>% 
> ##D   flatten_data() %>% 
> ##D   dplyr::filter(lubridate::as_date(datetime) > "2003-07-01") %>%
> ##D   plot_taxa_accum_sites()
> ##D   
> ##D # Plot from the observation table directly
> ##D plot_taxa_accum_sites(dataset$tables$observation)
> ## End(Not run)
> 
> # Plot the example dataset
> plot_taxa_accum_sites(ants_L1)
> 
> 
> 
> 
> cleanEx()
> nameEx("plot_taxa_accum_time")
> ### * plot_taxa_accum_time
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_taxa_accum_time
> ### Title: Plot taxa accumulation through time
> ### Aliases: plot_taxa_accum_time
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Read a dataset of interest
> ##D dataset <- read_data("edi.193.5")
> ##D 
> ##D # Plot the dataset
> ##D plot_taxa_accum_time(dataset)
> ##D 
> ##D # Flatten the dataset, manipulate, then plot
> ##D dataset %>% 
> ##D   flatten_data() %>% 
> ##D   dplyr::filter(lubridate::as_date(datetime) > "2003-07-01") %>%
> ##D   plot_taxa_accum_time()
> ##D   
> ##D # Plot from the observation table directly
> ##D plot_taxa_accum_time(dataset$tables$observation)
> ## End(Not run)
> 
> # Plot the example dataset
> plot_taxa_accum_time(ants_L1)
> 
> 
> 
> 
> cleanEx()
> nameEx("plot_taxa_diversity")
> ### * plot_taxa_diversity
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_taxa_diversity
> ### Title: Plot diversity (taxa richness) through time
> ### Aliases: plot_taxa_diversity
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Read a dataset of interest
> ##D dataset <- read_data("edi.193.5")
> ##D 
> ##D # Plot the dataset
> ##D plot_taxa_diversity(dataset)
> ##D 
> ##D # Plot the dataset with observations aggregated by year
> ##D plot_taxa_diversity(dataset, time_window_size = "year")
> ##D 
> ##D # Flatten the dataset, manipulate, then plot
> ##D dataset %>% 
> ##D   flatten_data() %>% 
> ##D   dplyr::filter(
> ##D     lubridate::as_date(datetime) > "2007-01-01") %>%
> ##D   plot_taxa_diversity()
> ##D   
> ##D # Plot from the observation table directly
> ##D plot_taxa_diversity(dataset$tables$observation)
> ## End(Not run)
> 
> # Plot the example dataset
> plot_taxa_diversity(ants_L1)
> 
> 
> 
> 
> cleanEx()
> nameEx("plot_taxa_occur_freq")
> ### * plot_taxa_occur_freq
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_taxa_occur_freq
> ### Title: Plot taxon occurrence frequencies
> ### Aliases: plot_taxa_occur_freq
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Read a dataset of interest
> ##D dataset <- read_data("edi.193.5")
> ##D 
> ##D # Plot the dataset
> ##D plot_taxa_occur_freq(dataset)
> ##D 
> ##D # Facet by location and color by taxon_rank
> ##D plot_taxa_occur_freq(
> ##D   data = dataset, 
> ##D   facet_var = "location_id", 
> ##D   color_var = "taxon_rank")
> ##D 
> ##D # Color by location and only include taxa with >= 5 occurrences
> ##D plot_taxa_occur_freq(
> ##D   data = dataset,
> ##D   color_var = "location_id",
> ##D   min_occurrence = 5)
> ##D 
> ##D # Flatten, filter using a time cutoff, then plot
> ##D dataset %>% 
> ##D   flatten_data() %>% 
> ##D   dplyr::filter(lubridate::as_date(datetime) > "2003-07-01") %>%
> ##D   plot_taxa_occur_freq()
> ## End(Not run)
> # Plot the example dataset
> plot_taxa_occur_freq(ants_L1)
> 
> 
> 
> 
> cleanEx()
> nameEx("plot_taxa_rank")
> ### * plot_taxa_rank
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_taxa_rank
> ### Title: Plot taxa ranks
> ### Aliases: plot_taxa_rank
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Read a dataset of interest
> ##D dataset <- read_data(
> ##D   id = "neon.ecocomdp.20120.001.001",
> ##D   site= c('COMO','LECO'), 
> ##D   startdate = "2017-06",
> ##D   enddate = "2019-09",
> ##D   check.size = FALSE)
> ##D 
> ##D # Plot the dataset
> ##D plot_taxa_rank(dataset)
> ##D 
> ##D # Plot with facet by location
> ##D plot_taxa_rank(dataset, facet_var = "location_id")
> ##D 
> ##D # Flatten the dataset, manipulate, then plot
> ##D dataset %>% 
> ##D   flatten_data() %>% 
> ##D   dplyr::filter(lubridate::as_date(datetime) > "2003-07-01") %>%
> ##D   dplyr::filter(grepl("COMO",location_id)) %>%
> ##D   plot_taxa_rank()
> ## End(Not run)
> 
> # Plot the example dataset
> plot_taxa_rank(ants_L1)
> 
> 
> 
> 
> cleanEx()
> nameEx("plot_taxa_shared_sites")
> ### * plot_taxa_shared_sites
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_taxa_shared_sites
> ### Title: Plot number of unique taxa shared across sites
> ### Aliases: plot_taxa_shared_sites
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Read a dataset of interest
> ##D dataset <- read_data("edi.193.5")
> ##D 
> ##D # Plot the dataset
> ##D plot_taxa_shared_sites(dataset)
> ##D 
> ##D # Flatten the dataset, manipulate, then plot
> ##D dataset %>% 
> ##D   flatten_data() %>% 
> ##D   dplyr::filter(lubridate::as_date(datetime) > "2003-07-01") %>%
> ##D   dplyr::filter(as.numeric(location_id) > 4) %>%
> ##D   plot_taxa_shared_sites()
> ##D   
> ##D # Plot from the observation table directly
> ##D plot_taxa_shared_sites(dataset$tables$observation)
> ## End(Not run)
> 
> # Plot the example dataset
> plot_taxa_shared_sites(ants_L1)
> 
> 
> 
> 
> cleanEx()
> nameEx("read_data")
> ### * read_data
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: read_data
> ### Title: Read published data
> ### Aliases: read_data
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Read from EDI
> ##D dataset <- read_data("edi.193.5")
> ##D str(dataset, max.level = 2)
> ##D 
> ##D # Read from NEON (full dataset)
> ##D dataset <- read_data("neon.ecocomdp.20120.001.001")
> ##D 
> ##D # Read from NEON with filters (partial dataset)
> ##D dataset <- read_data(
> ##D  id = "neon.ecocomdp.20120.001.001", 
> ##D  site = c("COMO", "LECO", "SUGG"),
> ##D  startdate = "2017-06", 
> ##D  enddate = "2019-09",
> ##D  check.size = FALSE)
> ##D 
> ##D # Read with datetimes as character
> ##D dataset <- read_data("edi.193.5", parse_datetime = FALSE)
> ##D is.character(dataset$tables$observation$datetime)
> ##D 
> ##D # Read from saved .rds
> ##D save_data(dataset, tempdir())
> ##D dataset <- read_data(from = paste0(tempdir(), "/dataset.rds"))
> ##D 
> ##D # Read from saved .csv
> ##D save_data(dataset, tempdir(), type = ".csv")# Save as .csv
> ##D dataset <- read_data(from = tempdir())
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("save_data")
> ### * save_data
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: save_data
> ### Title: Save a dataset
> ### Aliases: save_data
> 
> ### ** Examples
> 
> # Create directory for the data
> mypath <- paste0(tempdir(), "/data")
> dir.create(mypath)
> 
> # Save as .rds
> save_data(ants_L1, mypath)
Writing ants_L1.rds to /var/folders/71/bgft4r9n22zbwm69sc99f5300000gn/T//RtmpSDJrjJ/data
> dir(mypath)
[1] "ants_L1.rds"
> 
> # Save as .rds with the name "mydata"
> save_data(ants_L1, mypath, name = "mydata")
Writing mydata.rds to /var/folders/71/bgft4r9n22zbwm69sc99f5300000gn/T//RtmpSDJrjJ/data
> dir(mypath)
[1] "ants_L1.rds" "mydata.rds" 
> 
> # Save as .csv
> save_data(ants_L1, mypath, type = ".csv")
Writing edi.193.5 as .csv to /var/folders/71/bgft4r9n22zbwm69sc99f5300000gn/T//RtmpSDJrjJ/data
> dir(mypath)
[1] "ants_L1.rds" "edi.193.5"   "mydata.rds" 
> 
> ## Not run: 
> ##D # Save multiple datasets
> ##D ids <- c("edi.193.5", "edi.303.2", "edi.290.2")
> ##D datasets <- lapply(ids, read_data)
> ##D save_data(datasets, mypath)
> ##D dir(mypath)
> ## End(Not run)
> 
> # Clean up
> unlink(mypath, recursive = TRUE)
> 
> 
> 
> 
> cleanEx()
> nameEx("search_data")
> ### * search_data
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: search_data
> ### Title: Search published data
> ### Aliases: search_data
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Empty search returns all available datasets
> ##D search_data()
> ##D 
> ##D # "text" searches titles, descriptions, and abstracts
> ##D search_data(text = "Lake")
> ##D 
> ##D # "taxa" searches taxonomic ranks for a match
> ##D search_data(taxa = "Plantae")
> ##D 
> ##D # "num_years" searches the number of years sampled
> ##D search_data(num_years = c(10, 20))
> ##D 
> ##D # Use any combination of search fields to find the data you're looking for
> ##D search_data(
> ##D   text = c("Lake", "River"),
> ##D   taxa = c("Plantae", "Animalia"),
> ##D   num_taxa = c(0, 10),
> ##D   num_years = c(10, 100),
> ##D   sd_years = c(.01, 100),
> ##D   area = c(47.1, -86.7, 42.5, -92),
> ##D   boolean = "OR")
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("validate_data")
> ### * validate_data
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: validate_data
> ### Title: Validate tables against the model
> ### Aliases: validate_data
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Write a set of ecocomDP tables to file for validation
> ##D mydir <- paste0(tempdir(), "/dataset")
> ##D dir.create(mydir)
> ##D write_tables(
> ##D   path = mydir,
> ##D   observation = ants_L1$tables$observation, 
> ##D   observation_ancillary = ants_L1$tables$observation_ancillary,
> ##D   location = ants_L1$tables$location,
> ##D   location_ancillary = ants_L1$tables$location_ancillary,
> ##D   taxon = ants_L1$tables$taxon,
> ##D   taxon_ancillary = ants_L1$tables$taxon_ancillary,
> ##D   dataset_summary = ants_L1$tables$dataset_summary,
> ##D   variable_mapping = ants_L1$tables$variable_mapping)
> ##D 
> ##D # Validate
> ##D validate_data(path = mydir)
> ##D 
> ##D # Clean up
> ##D unlink(mydir, recursive = TRUE)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("write_tables")
> ### * write_tables
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: write_tables
> ### Title: Write tables to file
> ### Aliases: write_tables
> 
> ### ** Examples
> 
> # Create directory for the tables
> mypath <- paste0(tempdir(), "/data")
> dir.create(mypath)
> 
> # Create a couple inputs to write_tables()
> 
> flat <- ants_L0_flat
> 
> observation <- create_observation(
+   L0_flat = flat, 
+   observation_id = "observation_id", 
+   event_id = "event_id", 
+   package_id = "package_id",
+   location_id = "location_id", 
+   datetime = "datetime", 
+   taxon_id = "taxon_id", 
+   variable_name = "variable_name",
+   value = "value",
+   unit = "unit")
> 
> observation_ancillary <- create_observation_ancillary(
+   L0_flat = flat,
+   observation_id = "observation_id", 
+   variable_name = c("trap.type", "trap.num", "moose.cage"))
> 
> # Write tables to file
> 
> write_tables(
+   path = mypath, 
+   observation = observation, 
+   observation_ancillary = observation_ancillary)
Writing tables to file:
  observation
  observation_ancillary
> 
> dir(mypath)
[1] "observation.csv"           "observation_ancillary.csv"
> 
> # Clean up
> unlink(mypath, recursive = TRUE)
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  2.463 0.096 2.882 0.001 0.002 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
